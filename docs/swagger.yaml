basePath: /api
definitions:
  Author:
    properties:
      bio:
        description: Biografia do autor
        example: Autor de 1984 e A Revolução dos Bichos
        type: string
      name:
        example: George Orwell
        type: string
    type: object
  AuthorRequest:
    properties:
      authorIds:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
      description:
        example: A dystopian novel
        maxLength: 500
        type: string
      title:
        example: "1984"
        maxLength: 100
        minLength: 2
        type: string
    required:
    - title
    type: object
  Book:
    properties:
      authors:
        items:
          $ref: '#/definitions/Author'
        type: array
      description:
        description: '@example Livro conta a história....'
        example: Livro conta a história....
        type: string
      title:
        description: '@example 1984'
        example: "1984"
        type: string
    type: object
  BookListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Book'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  Credential:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  ErrorResponse:
    properties:
      details:
        description: Additional details (debug only)
        type: string
      error:
        description: Error message
        type: string
    type: object
  github_com_patrick-tondorf_lib_api_internal_domain.User:
    properties:
      email:
        type: string
      password:
        description: Usado apenas para receber o input
        type: string
    type: object
  internal_handler.LoginResponse:
    properties:
      expires_in:
        type: integer
      token:
        type: string
      token_type:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Virtual Library API with Supabase and JWT Authentication
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Library API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/Credential'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handler.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticate a user
      tags:
      - auth
  /authors:
    get:
      description: Get all authors from the library
      parameters:
      - description: Include books in response
        in: query
        name: withBooks
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Author'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all authors
      tags:
      - authors
    post:
      consumes:
      - application/json
      description: Create a new author in the system
      parameters:
      - description: Author data
        in: body
        name: author
        schema:
          $ref: '#/definitions/Author'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Author'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/Author'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/Author'
      security:
      - BearerAuth: []
      summary: Create a new author
      tags:
      - authors
  /authors/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve an author by their ID
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Author'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get an author by ID
      tags:
      - authors
  /books:
    get:
      description: Get paginated list of books with optional filters. Choose between
        basic version or with authors.
      parameters:
      - description: Filter by book title (partial match, case insensitive)
        in: query
        name: title
        type: string
      - description: Filter by author name (only works when with_authors=true)
        in: query
        name: author
        type: string
      - description: Include full author information in response
        in: query
        name: with_authors
        type: boolean
      - default: title
        description: Sort field
        enum:
        - title
        - created_at
        in: query
        name: sort
        type: string
      - default: ASC
        description: Sort direction
        enum:
        - ASC
        - DESC
        in: query
        name: sort_dir
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BookListResponse'
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: List books with pagination and filters
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Add a new book to the library
      parameters:
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/AuthorRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/Book'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Book'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update book details by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Book'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Book not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a book
      tags:
      - books
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user in the system
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/github_com_patrick-tondorf_lib_api_internal_domain.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: 'JWT Authorization header using the Bearer scheme. Example: "Bearer
      {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
